<?php

namespace Traders\Model;

use \Datetime;
use \Traders\DB\Sql;
use \Traders\Model;

class System extends Model {

	public function getUserCupom($email = null, $used, $tipo, $cat)// verifica se existe um cupom já gerado para o usuario
	{
		$sql = new Sql();

		return $sql->select("SELECT email_cupom FROM st_cupons WHERE email_cupom = :EMAIL AND tipo_Cupom = :TIPO AND categoria_Cupom = :CAT AND used_Cupom = :USED", array(
				"EMAIL" => $email,
				"TIPO"  => $tipo,
				"CAT"   => $cat,
				"USED"  => $used
			));
	}

	public function getVerCodCupom($codcupom)//Verifica exclusivamente se o código do cupom ja foi gerado
	{
		$sql = new Sql();

		return $sql->select("SELECT * FROM st_cupons WHERE cod_Cupom = :CUPOM ", array(
				"CUPOM" => $codcupom
			));
	}

	public static function listCupons() {
		$sql = new Sql();

		$cupom = $sql->select("SELECT * FROM st_cupons ORDER BY criacao_Cupom");
		return $cupom;
	}

	private function generateCodCupom($cat) {
		date_default_timezone_set("UTC");
		$date            = date("Y");
		$rand            = $senha            = rand(00000, 99999);
		$prefix          = "22TR";
		return $codcupom = $prefix.$date.$cat.$rand;
	}

	public function createCupom()//tipo é se geral ou individual e Tipo é desconto ou gratuidade
	{

		$sql = new Sql();

		if ($this->getcategoriacupomgeral() != null) {
			$codcupom = $this->generateCodCupom($this->getcategoriacupomgeral());
		} else {
			$codcupom = $this->generateCodCupom($this->getcategoriacupom());
		}

		 while ($codcupom == $this->getVerCodCupom($codcupom)) {
			if ($this->getcategoriacupomgeral() != null) {
				$codcupom = $this->generateCodCupom($this->getcategoriacupomgeral());
			} else {
				$codcupom = $this->generateCodCupom($this->getcategoriacupom());
			}
		}

		if ($this->getcategoriacupomgeral() != null) {
			$cupomexists = $this->getUserCupom(null, 0, $this->gettipocupom(), $this->getcategoriacupomgeral());
		} else {
			$cupomexists = $this->getUserCupom($this->getemail(), 0, $this->gettipocupom(), $this->getcategoriacupom());
		}

		if ($cupomexists != null) {
			return $msg = "Este usuário já recebeu um cupom deste tipo e não utilizou";
			exit;
		}

		if ($this->gettipocupom() == "multiplo") {
			$date           = new DateTime(str_replace("/", "-", $this->getvalidadegeral()));
			$validade_Cupom = $date->format('Y-m-d')." 23:59:59";

			if ($this->getcategoriacupomgeral() == "D") {
				$results = $sql->query("INSERT INTO st_cupons (tipo_Cupom, cod_Cupom, desconto_Cupom, dias_desc_Cupom, id_create_Cupom, categoria_Cupom, validade_Cupom, justify_Cupom, qtde_Cupom, used_Cupom)
				 	VALUES (:TIPO, :COD, :DESCONTO, :DIASDESCONTO, :IDCREATOR, :CATCUPOM, :VALIDADECUPOM, :JUSTIFICATIVA, :QTDCUPOM, :USED)", array(
						":TIPO"          => $this->gettipocupom(),
						":COD"           => $codcupom,
						":DESCONTO"      => $this->getdescontogeral(),
						":DIASDESCONTO"  => $this->getduracaodescontogeral(),
						":IDCREATOR"     => $_SESSION["User"]["id_User"],
						":CATCUPOM"      => $this->getcategoriacupomgeral(),
						":VALIDADECUPOM" => $validade_Cupom,
						":JUSTIFICATIVA" => $this->getuser_justify(),
						":QTDCUPOM"      => $this->getqtdecuponsgeral(),
						":USED"          => 0
					));

				if ($results) {
					return $msg = "Cupom gerado com sucesso";
				} else {
					return $msg = "Ocorreu um problema. Cupom não foi gerado";
				}
			} else {
				$results = $sql->query("INSERT INTO st_cupons (tipo_Cupom, cod_Cupom, dias_desc_Cupom, id_create_Cupom, categoria_Cupom, validade_Cupom, qtde_Cupom, justify_Cupom, used_Cupom)
				 	VALUES (:TIPO, :COD, :DIASDESCONTO, :IDCREATOR, :CATCUPOM, :VALIDADECUPOM, :QTDCUPOM, :JUSTIFICATIVA, :USED)", array(
						":TIPO"          => $this->gettipocupom(),
						":COD"           => $codcupom,
						":DIASDESCONTO"  => $this->getdiasdemogeral(),
						":IDCREATOR"     => $_SESSION["User"]["id_User"],
						":CATCUPOM"      => $this->getcategoriacupomgeral(),
						":VALIDADECUPOM" => $validade_Cupom,
						":QTDCUPOM"      => $this->getqtdecuponsgeral(),
						":JUSTIFICATIVA" => $this->getuser_justify(),
						":USED"          => 0
					));

				if ($results) {
					return $msg = "Cupom gerado com sucesso 2";
				} else {
					return $msg = "Ocorreu um problema. Cupom não foi gerado 2";
				}

			}

		} else {

			$date           = new DateTime(str_replace("/", "-", $this->getvalidade()));
			$validade_Cupom = $date->format('Y-m-d')." 23:59:59";

			if ($this->getcategoriacupom() == "D") {
				$results = $sql->query("INSERT INTO st_cupons (tipo_Cupom, cod_Cupom, email_cupom, cel_Cupom, desconto_Cupom, dias_desc_Cupom, id_create_Cupom, categoria_Cupom, validade_Cupom, justify_Cupom, qtde_Cupom, used_Cupom)
				 	VALUES (:TIPO, :COD, :EMAIL, :CEL, :DESCONTO, :DIASDESCONTO, :IDCREATOR, :CATCUPOM, :VALIDADECUPOM, :JUSTIFICATIVA, :QTDCUPOM, :USED)", array(
						":TIPO"          => $this->gettipocupom(),
						":COD"           => $codcupom,
						":EMAIL"         => $this->getemail(),
						":CEL"           => $this->getcel(),
						":DESCONTO"      => $this->getdesconto(),
						":DIASDESCONTO"  => $this->getduracaodesconto(),
						":IDCREATOR"     => $_SESSION["User"]["id_User"],
						":CATCUPOM"      => $this->getcategoriacupom(),
						":VALIDADECUPOM" => $validade_Cupom,
						":JUSTIFICATIVA" => $this->getuser_justify(),
						":QTDCUPOM"      => 1,
						":USED"          => 0
					));

				if ($results) {
					return $msg = "Cupom gerado com sucesso";
				} else {
					return $msg = "Ocorreu um problema. Cupom não foi gerado";
				}
			} else {
				$results = $sql->query("INSERT INTO st_cupons (tipo_Cupom, cod_Cupom, email_cupom, cel_Cupom, dias_desc_Cupom, id_create_Cupom, categoria_Cupom, validade_Cupom, qtde_Cupom, justify_Cupom, used_Cupom)
				 	VALUES (:TIPO, :COD, :EMAIL, :CEL, :DIASDESCONTO, :IDCREATOR, :CATCUPOM, :VALIDADECUPOM, :QTDCUPOM, :JUSTIFICATIVA, :USED)", array(
						":TIPO"          => $this->gettipocupom(),
						":COD"           => $codcupom,
						":EMAIL"         => $this->getemail(),
						":CEL"           => $this->getcel(),
						":DIASDESCONTO"  => $this->getdiasdemo(),
						":IDCREATOR"     => $_SESSION["User"]["id_User"],
						":CATCUPOM"      => $this->getcategoriacupom(),
						":VALIDADECUPOM" => $validade_Cupom,
						":QTDCUPOM"      => 1,
						":JUSTIFICATIVA" => $this->getuser_justify(),
						":USED"          => 0
					));

				if ($results) {
					return $msg = "Cupom gerado com sucesso 2";
				} else {
					return $msg = "Ocorreu um problema. Cupom não foi gerado 2";
				}

			}

		}

	}

	public function getCupom($id) {
		$sql = new Sql();

		$results = $sql->select("SELECT * FROM st_cupons WHERE id_Cupom = :ID ", array(
				":ID" => $id
			));

		$this->setData($results[0]);

		if ($this->getused_Cupom()) {
			return $results = $sql->select("SELECT * FROM st_cupons c INNER JOIN st_user u ON c.id_Cupom_id_User = u.id_User
											WHERE c.id_Cupom = :ID AND c.id_Cupom_id_User = :IDUSER ", array(
					":ID"     => $id,
					":IDUSER" => $this->getused_Cupom()
				));
			$this->setData($results[0]);
		}
	}

	public function createUserAdmin() {

		$sql = new Sql();

		$result = $sql->query("INSERT INTO st_useradm (nome_useradm, email_useradm, celular_useradm, levelControl_useradm, idAdm_useradm, password_useradm, verified, status_useradm, del_useradm) VALUES(:name, :email, :cel, :levelconta, :idadm, :password, :verified, :status, :del)", array(
				":name"       => $this->getadm_name(),
				":email"      => $this->getadm_email(),
				":cel"        => $this->getadm_cel(),
				":levelconta" => $this->getadm_nivel(),
				":idadm"      => $this->getadm_idadm(),
				":password"   => $this->gerarHash($this->getsenha()),
				":verified"   => $this->getadm_verified(),
				":status"     => 1,
				":del"        => 0
			));

		//$this->setData($result);
	}

	public static function listAdmLevels() {
		$sql = new Sql();

		$admlevel = $sql->select("SELECT * FROM st_adminlevel ORDER BY level_admLevel");
		return $admlevel;
	}

	public static function listAdmins() {
		$sql = new Sql();

		return $sql->select("SELECT * FROM st_useradm u INNER JOIN st_adminlevel l ON u.levelControl_useradm = l.level_admLevel
						     WHERE u.del_useradm <> 1 ORDER BY u.id_useradm");

	}

	public static function getAdmin($id) {
		$sql = new Sql();

		return $sql->select("SELECT * FROM st_useradm WHERE id_useradm :ID", array(
				":ID" => $id
			));

	}

	public static function operationAdmin($id, $operation) {
		$sql = new Sql();

		if ($operation == "del") {
			return $sql->query("UPDATE st_useradm SET del_useradm = 1 WHERE id_useradm = :ID", array(
					"ID" => $id
				));
		}

		return $sql->select("SELECT * FROM st_useradm u INNER JOIN st_adminlevel l ON u.levelControl_useradm = l.level_admLevel
						     WHERE u.del_useradm <> 1 ORDER BY u.id_useradm");

	}

}/* #################  FIM DA CLASSE   #######################*/

?>
